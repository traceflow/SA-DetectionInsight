[get_contributing_search_details(3)]
args = disabledFilter,domainFilter,flagFilter
definition = | where isnotnull('action.correlationsearch.enabled')\
| fillnull value="NONE" action.notable.param.security_domain\
| search disabled=$disabledFilter$ $domainFilter$\
| eval "Provided By" = if('eai:acl.app'=="DA-ESS-ContentUpdate", "ESCU", "ES") \
| eval isEnabled = if(disabled==0, "True", "False")\
| eval hasCESearch = if(isnull('action.notable.param.drilldown_search') OR 'action.notable.param.drilldown_search' == "", "No", "Yes")\
| search hasCESearch = "$flagFilter$"\
| rename eai:acl.app as Application, title as Name, action.notable.param.security_domain as Domain, isEnabled as "Enabled?", hasCESearch as "Has Search?", action.notable.param.drilldown_search as "Contributing Events Search"\
| table Name, "Enabled?", "Provided By", Application, Domain, "Has Search?", "Contributing Events Search"
iseval = 0

[get_notable_details(3)]
args = disabledFilter,domainFilter,flagFilter
definition = | where isnotnull('action.correlationsearch.enabled')\
| fillnull value="NONE" action.notable.param.security_domain\
| search disabled=$disabledFilter$ $domainFilter$\
| eval "Provided By" = if('eai:acl.app'=="DA-ESS-ContentUpdate", "ESCU", "ES") \
| eval isEnabled = if(disabled==0, "True", "False")\
| eval generatesNotable = if(match('actions',"notable"), "Yes", "No")\
| search generatesNotable = "$flagFilter$"\
| rename eai:acl.app as Application, title as Name, action.notable.param.security_domain as Domain, isEnabled as "Enabled?", generatesNotable as "Generates Notable?"\
| table Name, "Enabled?", "Provided By", Application, Domain, "Generates Notable?"
iseval = 0

[get_risk_details(3)]
args = disabledFilter,domainFilter,flagFilter
definition = | where isnotnull('action.correlationsearch.enabled')\
| fillnull value="NONE" action.notable.param.security_domain\
| search disabled=$disabledFilter$ $domainFilter$\
| eval "Provided By" = if('eai:acl.app'=="DA-ESS-ContentUpdate", "ESCU", "ES") \
| eval isEnabled = if(disabled==0, "True", "False")\
| eval generatesRisk = if(match('actions',"risk"), "Yes", "No")\
| search generatesRisk = "$flagFilter$"\
| rename eai:acl.app as Application, title as Name, action.notable.param.security_domain as Domain, isEnabled as "Enabled?", generatesRisk as "Generates Risk?"\
| table Name, "Enabled?", "Provided By", Application, Domain, "Generates Risk?"
iseval = 0

[get_mitre_details(3)]
args = disabledFilter,domainFilter,flagFilter
definition = | where isnotnull('action.correlationsearch.enabled') \
| fillnull value="NONE" action.notable.param.security_domain \
| search disabled=$disabledFilter$ $domainFilter$ \
| eval "Provided By" = if('eai:acl.app'=="DA-ESS-ContentUpdate", "ESCU", "ES") \
| eval isEnabled = if(disabled==0, "True", "False") \
| eval mappedToMitre = if(match('action.correlationsearch.annotations',"mitre_attack"), "Yes", "No") \
| search mappedToMitre = "$flagFilter$"\
| rename eai:acl.app as Application, title as Name, action.notable.param.security_domain as Domain, isEnabled as "Enabled?", mappedToMitre as "Mapped to MITRE?" \
| table Name, "Enabled?", "Provided By", Application, Domain, "Mapped to MITRE?"
iseval = 0

[get_cis20_details(3)]
args = disabledFilter,domainFilter,flagFilter
definition = | where isnotnull('action.correlationsearch.enabled') \
| fillnull value="NONE" action.notable.param.security_domain \
| search disabled=$disabledFilter$ $domainFilter$ \
| eval "Provided By" = if('eai:acl.app'=="DA-ESS-ContentUpdate", "ESCU", "ES") \
| eval isEnabled = if(disabled==0, "True", "False") \
| eval mappedToCIS20 = if(match('action.correlationsearch.annotations',"cis20"), "Yes", "No") | search mappedToCIS20 = "$flagFilter$"\
| rename eai:acl.app as Application, title as Name, action.notable.param.security_domain as Domain, isEnabled as "Enabled?", mappedToCIS20 as "Mapped to CIS20?" \
| table Name, "Enabled?", "Provided By", Application, Domain, "Mapped to CIS20?"
iseval = 0

[get_nist_details(3)]
args = disabledFilter,domainFilter,flagFilter
definition = | where isnotnull('action.correlationsearch.enabled') \
| fillnull value="NONE" action.notable.param.security_domain \
| search disabled=$disabledFilter$ $domainFilter$ \
| eval "Provided By" = if('eai:acl.app'=="DA-ESS-ContentUpdate", "ESCU", "ES") \
| eval isEnabled = if(disabled==0, "True", "False") \
| eval mappedToNist = if(match('action.correlationsearch.annotations',"nist"), "Yes", "No") \
| search mappedToNist = "$flagFilter$"\
| rename eai:acl.app as Application, title as Name, action.notable.param.security_domain as Domain, isEnabled as "Enabled?", mappedToNist as "Mapped to NIST?" \
| table Name, "Enabled?", "Provided By", Application, Domain, "Mapped to NIST?"
iseval = 0

[get_killchain_details(3)]
args = disabledFilter,domainFilter,flagFilter
definition = | where isnotnull('action.correlationsearch.enabled') \
| fillnull value="NONE" action.notable.param.security_domain \
| search disabled=$disabledFilter$ $domainFilter$ \
| eval "Provided By" = if('eai:acl.app'=="DA-ESS-ContentUpdate", "ESCU", "ES") \
| eval isEnabled = if(disabled==0, "True", "False") \
| eval mappedToKillChain = if(match('action.correlationsearch.annotations',"kill_chain_phases"), "Yes", "No") \
| search mappedToKillChain = "$flagFilter$"\
| rename eai:acl.app as Application, title as Name, action.notable.param.security_domain as Domain, isEnabled as "Enabled?", mappedToKillChain as "Mapped to KillChain?" \
| table Name, "Enabled?", "Provided By", Application, Domain, "Mapped to KillChain?"
iseval = 0

[get_tim_details(3)]
args = disabledFilter,domainFilter,flagFilter
definition = | where isnotnull('action.correlationsearch.enabled') \
| fillnull value="NONE" action.notable.param.security_domain \
| search disabled=$disabledFilter$ $domainFilter$ \
| eval "Provided By" = if('eai:acl.app'=="DA-ESS-ContentUpdate", "ESCU", "ES") \
| eval isEnabled = if(disabled==0, "True", "False") \
| eval usesTIM = if(match('actions',"trustar_submit_event"), "Yes", "No") \
| search usesTIM = "$flagFilter$" \
| rename eai:acl.app as Application, title as Name, action.notable.param.security_domain as Domain, isEnabled as "Enabled?", usesTIM as "Uses Threat Intelligence Management?" \
| table Name, "Enabled?", "Provided By", Application, Domain, "Uses Threat Intelligence Management?"
iseval = 0

[get_detection_details(1)]
args = nameFilter
definition = | search title = "$nameFilter$"\
| rename description as Description, action.notable.param.severity as Severity, search as Search \
| eval Severity = upper(substr(Severity,1,1)).substr(Severity,2)\
| table Description, Severity, Search
iseval = 0

[get_detection_annotations(1)]
args = nameFilter
definition = | search title = "$nameFilter$"\
| fields action.correlationsearch.annotations \
| spath input=action.correlationsearch.annotations \
| rename context{} as context, mitre_attack{} as mitre_attack, analytic_story{} as analytic_story, nist{} as nist, cis20{} as cis20, cve{} as cve, kill_chain_phases{} as kill_chain_phases, observable{}.name as observable_name, observable{}.role{} as observable_role, observable{}.type as observable_type\
| lookup mitre_enrichment.csv mitre_id as mitre_attack OUTPUT technique as mitre_description\
| eval mitre_attack = mvzip(mitre_attack, mitre_description, "|")\
| lookup nist_lookup id as nist OUTPUT description as nist_description\
| eval nist = mvzip(nist, nist_description, "|")\
| lookup cis20_lookup id as cis20 OUTPUT description as cis20_description\
| eval cis20 = mvzip(cis20, cis20_description, "|")\
| eval observable = mvzip(observable_type, mvzip(observable_name, observable_role))\
| table analytic_story, cis20, context, cve, kill_chain_phases, mitre_attack, nist, observable, confidence, impact
iseval = 0

[get_detection_details_analytic_story(1)]
args = nameFilter
definition = | search title="$nameFilter$"\
| table title, action.correlationsearch.annotations\
| spath input=action.correlationsearch.annotations\
| rename analytic_story{} as analytic_story\
| table title, analytic_story\
| mvexpand analytic_story\
| eval path = title + "/"+ analytic_story\
| fillnull value="No results found" path
iseval = 0

[get_detection_details_cve(1)]
args = nameFilter
definition = | search title="$nameFilter$"\
| table title, action.correlationsearch.annotations\
| spath input=action.correlationsearch.annotations\
| rename cve{} as cve\
| table title, cve\
| mvexpand cve\
| eval path = title + "/"+ cve\
| fillnull value="No results found" path
iseval = 0

[get_detection_details_killchain(1)]
args = nameFilter
definition = | search title="$nameFilter$"\
| table title, action.correlationsearch.annotations\
| spath input=action.correlationsearch.annotations\
| rename kill_chain_phases{} as kill_chain_phases\
| table title, kill_chain_phases\
| mvexpand kill_chain_phases\
| eval path = title + "/"+ kill_chain_phases\
| fillnull value="No results found" path
iseval = 0

[get_detection_details_mitre_attack(1)]
args = nameFilter
definition = | search title="$nameFilter$"\
| table title, action.correlationsearch.annotations\
| spath input=action.correlationsearch.annotations\
| rename mitre_attack{} as mitre_attack\
| table title, mitre_attack\
| mvexpand mitre_attack\
| eval path = title + "/"+ mitre_attack\
| fillnull value="No results found" path
iseval = 0

[get_detection_details_observable(1)]
args = nameFilter
definition = | search title="$nameFilter$"\
| table title, action.correlationsearch.annotations\
| spath input=action.correlationsearch.annotations\
| rename observable{}.name as observable_name, observable{}.role{} as observable_role, observable{}.type as observable_type\
| eval observable = mvzip(observable_type, mvzip(observable_name, observable_role))\
| table title, observable\
| mvexpand observable\
| eval path = title + "/Type: " + mvindex(split(observable, ","), 0) + "/Field: " + mvindex(split(observable, ","), 1) + "/Role: " + mvindex(split(observable, ","), 2)\
| fillnull value="No results found" path
iseval = 0

[max_search_grouping_percentage]
definition = 15
iseval = 0

[get_other_unmanaged_annotations_counts]
definition = count(eval(match('action.correlationsearch.annotations',"atomic_red_team"))) as "Detection is mapped to Atomic Red Team Tests"
iseval = 0

[get_atomic_red_team_details(3)]
args = disabledFilter,domainFilter,flagFilter
definition = | where isnotnull('action.correlationsearch.enabled') \
| fillnull value="NONE" action.notable.param.security_domain \
| search disabled=$disabledFilter$ $domainFilter$\
| eval "Provided By" = if('eai:acl.app'=="DA-ESS-ContentUpdate", "ESCU", "ES") \
| eval isEnabled = if(disabled==0, "True", "False") \
| eval hasARTMapping = if(match('action.correlationsearch.annotations',"atomic_red_team"), "Yes", "No") \
| search hasARTMapping = "$flagFilter$"\
| spath input=action.correlationsearch.annotations \
| rename atomic_red_team{} as atomic_red_team \
| mvexpand atomic_red_team\
| rename eai:acl.app as Application, title as Name, action.notable.param.security_domain as Domain, isEnabled as "Enabled?", hasARTMapping as "Has Atomic Mapping?", atomic_red_team as "Atomic Red Team Test Mapping" \
| table Name, "Enabled?", "Provided By", Application, Domain, "Has Atomic Mapping?", "Atomic Red Team Test Mapping"
iseval = 0

[check_for_issues]
definition = | eval issue1 = if(isnotnull(datamodel) AND accelerated=="false", "Uses a non-accelerated data model (" + datamodel + ")", null())\
| eval issue2 = if(isnotnull(datamodel) AND size==0, "Uses an empty data model (" + datamodel + ")", null())\
| eval issue3 = if(isnotnull(datamodel) AND last_error!="", "Uses a data model with recent acceleration errors (" + datamodel + ")", null())\
| eval issue4 = if(isnotnull(datamodel) AND (datamodel == "Application_State" OR datamodel == "Change_Analysis"), "Uses a deprecated data model (" + datamodel + ")", null())\
| eval issue5 = if(actions=="<none>", "Has no actions defined", null())\
| eval issue6 = if(Domain == "<none>", "Not mapped to a Security Domain", null())\
| eval issue7 = if(isnull(Technique) OR Technique == "", "Not mapped to MITRE ATT&CK", null())\
| eval issue8 = if(match(actions, "risk") AND risk_score == 0, "Should generate non-zero risk", null())\
| eval issue9 = if(risk_score > 0 AND (risk_score_dev >= 10 OR risk_score_dev <= 0.1), "Significant Risk Score deviation from average", null())\
| eval issue10 = if(isnotnull(model_name) AND model_exists == 0, "Uses missing machine-learning model (" + model_name + ")", null())\
| eval issue11 = if(orphan == 1, "Correlation Search Owner no longer a Splunk user", null())\
| foreach issue* [eval issues=mvappend(issues, '<<FIELD>>')]\
| eval issues = coalesce(issues, "None")
iseval = 0

[check_for_scheduling_issues]
definition = | eval issue1 = if(search_type = "real-time", "Performance intensive scheduling mode", null())\
| eval issue2 = if(disabled=0 AND is_scheduled = 0, "Enabled but not scheduled", null())\
| eval issue3 = if(percent > `max_search_grouping_percentage`, "Part of a CRON schedule that has a high percentage of total searches (" + percent + "%)", null())\
| eval issue4 = if(schedule_window = "0", "Consider using \"auto\" Schedule Windows", null())\
| eval issue5 = if(allow_skew = "0", "Consider setting an allow_skew value", null())\
| foreach issue* [eval issues=mvappend(issues, '<<FIELD>>')]\
| eval issues = coalesce(issues, "None")
iseval = 0
